设计哈希映射

不使用任何内建的哈希表库设计一个哈希映射

具体地说，你的设计应该包含以下的功能

put(key, value)：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。
get(key)：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。
remove(key)：如果映射中存在这个键，删除这个数值对。

示例：

MyHashMap hashMap = new MyHashMap();
hashMap.put(1, 1);          
hashMap.put(2, 2);         
hashMap.get(1);            // 返回 1
hashMap.get(3);            // 返回 -1 (未找到)
hashMap.put(2, 1);         // 更新已有的值
hashMap.get(2);            // 返回 1 
hashMap.remove(2);         // 删除键为2的数据
hashMap.get(2);            // 返回 -1 (未找到) 

注意：

所有的值都在 [1, 1000000]的范围内。
操作的总数目在[1, 10000]范围内。
不要使用内建的哈希库。


class MyHashMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.l = [None for i in range(100)]
        
    def hash(self, key):
        return key % 100    # 100是自选的，不过这个值乘以下面那个10000(自选)必须是1000000，因为题目要求是键在[1-1000000]之间
    
    def pos(self, key):
        return key // 100
        
    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: None
        """

        hash_key = self.hash(key)
        if  self.l[hash_key] is None:
            self.l[hash_key] = [None]*10000    # 为了解决哈希冲突，每个键对应10000个可能的对应值
        self.l[hash_key][self.pos(key)]=value      # 将值散列化存入上述10000个中的某个位置

            

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        hash_key = self.hash(key)
        first_list = self.l[hash_key]
        if first_list is not None:
            find_value = first_list[self.pos(key)]
            if find_value is not None:
                return find_value
            else:
                return -1
        else:
            return -1
        '''if (self.l[hash_key] is None) or (self.l[hash_key][self.pos(key)] is None):
            return -1
        else:
            return self.l[hash_key][self.pos(key)]'''
        

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: None
        """
        hash_key = self.hash(key)
        first_list = self.l[hash_key]
        if first_list is not None:
            first_list[self.pos(key)]=None
        


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
