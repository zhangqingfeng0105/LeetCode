前K个高频元素

给定一个非空的整数数组，返回其中出现频率前k个高频的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]

示例 2:

输入: nums = [1,2], k = 2
输出: [1,2]

示例 3:

输入: nums = [1], k = 1
输出: [1]
说明：

你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。

class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        dictionary = {}               # 把字典按照值进行排序，取出前k个即可
        for i in nums:
            dictionary[i] = dictionary.get(i,0)+1
        return [z[0] for z in sorted(dictionary.items(),key=lambda x:x[1],reverse=True)[:k]]
