两个数组的交集 II

给定两个数组，编写一个函数来计算它们的交集。

示例 1:

输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2,2]
示例 2:

输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [4,9]
说明：

输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
我们可以不考虑输出结果的顺序。
进阶:

如果给定的数组已经排好序呢？你将如何优化你的算法？
如果 nums1 的大小比 nums2 小很多，哪种方法更优？
如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？


class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        output = []
        Dict = {}
        for i in nums1:         # 将列表1存入字典中，键是列表的每个元素，值是元素出现的个数
            if i in Dict:
                Dict[i] = Dict[i]+1
            else:
                Dict[i] = 1       
        for i in nums2:          # 遍历列表2，如果列表2的元素在字典中，然后两两消掉，就是把字典中该键对应的值减少1，因为题目要求保持原列表中的顺序
            if i in Dict:
                if Dict[i]>=1:
                    Dict[i] = Dict[i]-1
                    output.append(i)
                    continue
                else:
                    continue
            else:
                continue      
        return output
