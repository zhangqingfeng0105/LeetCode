无重复字符的最长子串

给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
     
     
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        max_value = -1       # 最大子串长度
        set_origin = []      # 保存每个字符的列表，遇到重复返回需要删除的元素，让字典知道删除那几个键
        dictionary = {}
        start = 0
        if s=="":
            return 0
        for index,i in enumerate(s):
            if i not in dictionary:
                dictionary[i]=index
                set_origin.append(i)   # 比如['p','w','w']发现w重复，因此记录此时不重复子串长度为2，在继续寻找之前需删除第二个w之前的键，
            else:                      # 因此set_origin列表只需指出[start:index]，字典就知道删除哪几个键了，然后再继续寻找下一个不重复子串
                if len(dictionary) > max_value:
                    max_value = len(dictionary)
                delete_list= set_origin[start:dictionary[i]+1]
                start = dictionary[i]+1
                for item in delete_list:
                    del dictionary[item]
                dictionary[i] = index
                set_origin.append(i)
            return max(len(dictionary),max_value)
