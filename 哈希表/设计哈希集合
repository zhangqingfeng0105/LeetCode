设计哈希集合

不使用任何内建的哈希表库设计一个哈希集合

具体地说，你的设计应该包含以下的功能

add(value)：向哈希集合中插入一个值。
contains(value) ：返回哈希集合中是否存在这个值。
remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。

示例:

MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // 返回 true
hashSet.contains(3);    // 返回 false (未找到)
hashSet.add(2);          
hashSet.contains(2);    // 返回 true
hashSet.remove(2);          
hashSet.contains(2);    // 返回  false (已经被删除)

注意：

所有的值都在 [1, 1000000]的范围内。
操作的总数目在[1, 10000]范围内。
不要使用内建的哈希集合库。

class MyHashSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.l = [[]] * 10000            # 因为有10000个数要存，因此设置了10000个空列表
        

    def add(self, key):        
        """
        :type key: int
        :rtype: None
        """
        hash_key = key % 10000    # 为了解决哈希冲突，当哈希之后有重复键的时候，将所有对应的值存放与列表中
        if len(self.l[hash_key]) == 0:
            self.l[hash_key]=[key]
        elif key not in self.l[hash_key]:
            self.l[hash_key].append(key)
                

    def remove(self, key):
        """
        :type key: int
        :rtype: None
        """
        hash_key = key % 10000
        finded_list = self.l[hash_key]
        # print(finded_list)
        if key in finded_list:
            finded_list.remove(key)
            return finded_list
        else:
            return finded_list
        
    def contains(self, key):
        """
        Returns true if this set contains the specified element
        :type key: int
        :rtype: bool
        """
        hash_key = key % 10000
        finded_list = self.l[hash_key]
        return  key in finded_list

# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)
