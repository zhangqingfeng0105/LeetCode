 完美矩形
 
 我们有 N 个与坐标轴对齐的矩形, 其中 N > 0, 判断它们是否能精确地覆盖一个矩形区域。

每个矩形用左下角的点和右上角的点的坐标来表示。例如， 一个单位正方形可以表示为 [1,1,2,2]。 ( 左下角的点的坐标为 (1, 1) 以及右上角的点的坐标为 (2, 2) )。



示例 1:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [3,2,4,4],
  [1,3,2,4],
  [2,3,3,4]
]

返回 true。5个矩形一起可以精确地覆盖一个矩形区域。
 



示例 2:

rectangles = [
  [1,1,2,3],
  [1,3,2,4],
  [3,1,4,2],
  [3,2,4,4]
]

返回 false。两个矩形之间有间隔，无法覆盖成一个矩形。
 



示例 3:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [3,2,4,4]
]

返回 false。图形顶端留有间隔，无法覆盖成一个矩形。
 



示例 4:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [2,2,4,4]
]

返回 false。因为中间有相交区域，虽然形成了矩形，但不是精确覆盖

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/perfect-rectangle
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解题思路：
如果是完美矩形 那么一定满足两点： 
（1）出现一次的顶点一定只有四个，分别是最左下 最左上 最右下 最右上。 其他点成对出现 要么两个，要么四个
（2）四个点围城的矩形面积 = 小矩形的面积之和


class Solution(object):
    def isRectangleCover(self, rectangles):
        """
        :type rectangles: List[List[int]]
        :rtype: bool
        """

        left_low = sorted(rectangles,key= (lambda x:[x[0],x[1]]))[0][:2]
        right_up = sorted(rectangles,key= (lambda x:[x[2],x[3]]),reverse=True)[0][2:]
        area_sum = self.calcArea(left_low,right_up)
        real_area_sum = 0
        dic = {}
        for i,v in enumerate(rectangles):
            dic[tuple(v[:2])] = dic.get(tuple(v[:2]),0) + 1
            dic[tuple(v[2:])] = dic.get(tuple(v[2:]),0) + 1
            dic[tuple(v[2:3]+v[1:2])] = dic.get(tuple(v[2:3]+v[1:2]),0) + 1
            dic[tuple(v[:1]+v[3:])] = dic.get(tuple(v[:1]+v[3:]),0) + 1
            real_area_sum += self.calcArea(v[:2],v[2:])
        if area_sum != real_area_sum or len([e for e,f in dic.items() if f%2 == 1 and f != 1])!=0:
            return False
        from functools import reduce
        temp_list = [list(e) for e,f in dic.items() if f == 1]
        if len(temp_list) != 4:
            return False
        theory_left_up = left_low[:1]+right_up[1:]
        theory_right_low = right_up[:1]+left_low[1:]

        if left_low in temp_list and right_up in temp_list and theory_left_up in temp_list and theory_right_low in temp_list:
            return True
        else:
            return False
        return False

    def calcArea(self,l1,l2):
        return (l2[0] - l1[0]) * (l2[1]-l1[1])
