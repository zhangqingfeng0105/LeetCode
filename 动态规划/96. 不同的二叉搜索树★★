96. 不同的二叉搜索树

给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

★★思路：---------------
假设一共是n个节点，那么根节点是肯定有一个的。剩下的n-1个节点则要分配给根节点的左子树和右子树，那么左边可能的个数left是0,1,2,.....n-1；
右边则是（n-1）- left 。能用动态规划填表的原因是，当给定个数为x的时候，这个二叉搜索树里面的数字不管是1,2,3....x还是3,4,5,....,x+3其实效果是一样的，
我们只要考虑数字列的次序就可以了，它实际上是什么数字是不重要的。因此，对于1,2两个数字来说dp[2]=2；对于2,3两个数字来说dp[2]=2仍然是成立的。
另外还要注意左右两边子树的可能个数是要相乘的，不是相加。

class Solution(object):
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [0 for _ in range(n+1)]
        dp[0],dp[1] =1,1
        for i in range(2,n+1):
            for j in range(i):
                dp[i]+=dp[j] * dp[i-j-1]
        return dp[n]



