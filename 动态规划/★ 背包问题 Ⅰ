lintcode 背包问题 Ⅰ

给定N个物品，重量分别是A0,A1,...AN-1，一个背包最大承重是正整数M，问，最多能带走多重的物品？

示例1：
输入4个物品，重量分别是：2，3，5，7，背包最大承重是11。
输出10 (三个物品，2，3，5)

★思路：-------------------------------------------
数组与总承重有关。并且要把总承重放入状态。
设置一个二维数组dp，dp[i][j]表示前i个商品组合，是否能组成<=j的组合。dp中，行为i，表示前i个元素任意组合，列是j，是重量，且 0 <= j <= M
对于示例1，初始化dp
 
                    0      1      2      3      4       5       6       7       8       9       10
 前0个物品[]         √      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前1个物品[2]        ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前2个物品[2,3]      ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前3个物品[2,3,5]    ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前4个物品[2,3,5,7]  ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 
 0个元素只能组成重量0，因此初始时，只有dp[0][0]=True。
 从第2行开始填充dp，第二行是前一个商品，他不仅继承了他的前一行，并且还能组成重量：0+2=2，因此dp
                    0      1      2      3      4       5       6       7       8       9       10
 前0个物品[]         √      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前1个物品[2]        √      ×      √      ×      ×       ×       ×       ×       ×       ×       ×
 前2个物品[2,3]      ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前3个物品[2,3,5]    ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前4个物品[2,3,5,7]  ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 
 再填充第3行，第三行是前2个物品组成的重量，他不仅继承了上一行(第2行),而且可以组成新的重量：0+3,2+3，因此dp
                    0      1      2      3      4       5       6       7       8       9       10
 前0个物品[]         √      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前1个物品[2]        √      ×      √      ×      ×       ×       ×       ×       ×       ×       ×
 前2个物品[2,3]      √      ×      √      √      ×       √       ×       ×       ×       ×       ×
 前3个物品[2,3,5]    ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前4个物品[2,3,5,7]  ×      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 
 依次类推，第4行，第5行。最终dp为
                    0      1      2      3      4       5       6       7       8       9       10
 前0个物品[]         √      ×      ×      ×      ×       ×       ×       ×       ×       ×       ×
 前1个物品[2]        √      ×      √      ×      ×       ×       ×       ×       ×       ×       ×
 前2个物品[2,3]      √      ×      √      √      ×       √       ×       ×       ×       ×       ×
 前3个物品[2,3,5]    √      ×      √      √      ×       √       ×       √       √       ×       √
 前4个物品[2,3,5,7]  √      ×      √      √      ×       √       ×       √       √       √       √
 
 最终返回的是，最后一行的，从右边数第一个True的重量,也即是dp右下角第一个√的纵坐标
 
class Solution:
    '''
    num:存放每件商品重量的列表
    target:目标总量，int正整数
    '''
    def backPack(self,num,target):
        n = len(num)
        if n == 0:
            return 0
        dp = [[False for j in range(target+1)] for i in range(n+1)]
        dp[0][0]= True
        for i in range(1,n+1):      # n是商品个数，也是dp的行数，target是dp的列数
            for j in range(target+1):
                dp[i][j] = dp[i-1][j]
                if j >= num[i-1]:
                    dp[i][j] = (dp[i][j]) or dp[i-1][j-num[i-1]]

        for i in range(target,-1,-1):
            if dp[-1][i]:
                return i
 
 
 
 
