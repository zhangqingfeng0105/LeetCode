背包问题 Ⅱ

给定N个正整数，A0,A1,...AN-1，一个正整数target，问有多少种组合加起来拼出target，每个Ai只能用一次。

示例：

A= [1,2,3,3,7]， target = 7，
输出 2(1+3+3=7和7，共2种)

★ 思路----------------------------------------

把这个题转化为背包问题，N个正整数变为N个物品的重量A1，A2，...AN-1 ，target转化为载重target的背包，跟背包I的思路一样，只是这个题不是能不能拼出target，
而是求得的是拼出的组合有多少种，就是把dp的bool类型转为int类型，存贮有多少种

class Solution:
    '''
    num:存放每件商品重量的列表
    target:目标总量，int正整数
    '''
    def backPack(self,num,target):

        n = len(num)
        if n == 0:
            return 0
        dp = [0 for j in range(target+1)]
        dp[0] = 1
        for i in range(1,n+1):
            for j in range(target,-1,-1):  # 从右往左遍历，就不用开二维数组dp了，极大节约空间
                if j >= num[i-1]:
                    dp[j] += dp[j-num[i-1]]  

        return dp[target]
