213. 打家劫舍 II

你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2:

输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

★思路：-------------------
现在是一个环形，偷了最后一家，那么第一家就偷不了，偷了第一家，最后一家偷不了，因此，环形可分为两种情况：偷第一家的时候，最后一家偷不了，那么可以把
最后一家删除，这样就不是环形了，就是打家劫舍I了；偷最后一家，那么第一家偷不了，因此把第一家删除，那么也不构成环形，也是打家劫舍I。

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        if n == 0:
            return 0
        elif n == 1:
            return nums[0]
        elif n == 2:
            return max(nums)
        dp = [0 for i in range(n-1)]
        nums1 = nums[:-1]
        nums2 = nums[1:]
        def helper(dp,size,num):        # 定义一个辅助函数，辅助函数就是打家劫舍I的主程序，只需改传参即可达到上述两种情况的目的
            for i in range(size):
                if i == 0:
                    dp[0] = num[0]
                elif i == 1:
                    dp[1] = max(num[0],num[1])
                else:
                    dp[i] = max(dp[i-1],dp[i-2]+num[i])
            return dp[-1]
        return max(helper(dp,n-1,nums1),helper(dp,n-1,nums2))
