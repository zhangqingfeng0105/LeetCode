达到终点的最小步数

给定一个数列，如 array = [2,3,1,1,6],数列中的元素代表做多可以向后走的步数，如 array[0] = 2,说明站在0位置，最多可以向后走2步，到达2位置，
现在假如站在0位置上，问是否可以达到最后的位置，如本例就是达到位置4，假如能达到，最小步数是多少？，如果不能输出-1

例：

输入 array = [2,3,1,1,6]
输出  2
解释：开始在位置0，最多可以走2步，但是我们走到位置1，位置1可以走3步，达到位置4，此时到达终点，因此可以到达终点，最小步数是2 

代码

def minSemp(l):
    n = len(l)
    dp = [float('inf') for _ in range(n)]    # 初始化dp，inf代表不可达到终点，其余数值代表到达终点的最小步数
    dp[-1] = 0
    for i in range(n-2,-1,-1):          # 从后往前
        furchJump = min(l[i] + i,n-1)
        for j in range(i+1,furchJump+1):    # 遍历该点能达到的位置
            if dp[j] != float('inf'):       # 如果该点到达的位置不是inf，代表那个位置是可以到达终点的
                dp[i] = min(dp[i],dp[j])+1    # 因此步数加1
    return dp[0] if dp[0] != float('inf') else -1
