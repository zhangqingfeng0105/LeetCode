279. 完全平方数

给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.


★思路：
（1）可以用队列实现
（2）可以用dp思想实现

from collections import deque
from math import sqrt
class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        # ----------------------------------法1
        # queue = deque()     # 定义一个队列
        # queue.append([n,1])
        # while queue:
        #     diff_value,cnt = queue.popleft()
        #     for i in range(int(sqrt(diff_value)),0,-1):  # 将这个数做开方，从大到小开始取，比如给定12，开方取整为3,
        #         if (diff_value - i*i) == 0:
        #             return cnt
        #         queue.append([diff_value - i*i,cnt+1])
        
        
        # 法2------------------------------------
        
        dp = [float('inf') for _ in range(n+1)]
        dp[0] = 0
        for i in range(1,n+1):
            for j in range(1,int(math.pow(i,0.5))+1):
                dp[i] = min(dp[i],dp[i-j*j] + 1)

        return dp[n]
