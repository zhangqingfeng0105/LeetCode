★★ 115. 不同的子序列

给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。

一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）

示例 1:

输入: S = "rabbbit", T = "rabbit"
输出: 3
解释:

如下图所示, 有 3 种可以从 S 中得到 "rabbit" 的方案。
(上箭头符号 ^ 表示选取的字母)

rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^
示例 2:

输入: S = "babgbag", T = "bag"
输出: 5
解释:

如下图所示, 有 5 种可以从 S 中得到 "bag" 的方案。 
(上箭头符号 ^ 表示选取的字母)

babgbag
^^ ^
babgbag
^^    ^
babgbag
^    ^^
babgbag
  ^  ^^
babgbag
    ^^^
    

★★ 思路： ---------------------------------------------

要求 B[0,..n-1] 在 A[0,..m-1]中出现多少次
需要知道 B[0,n-1] 在A[0,.m-2]中出现了多少次（B的最后一个字符不等于A的最后一个字符），以及B[0,..n-2] 在A[0,..m-2]中出现多少次（B的最后一个字符
等于A的最后一个字符）

设： f[i][j] 为B前j个字符B[0,..j-1] 在A前i个字符A[0,..i-1]中出现多少次?
    f[i][j]   = f[i-1][j-1] 且 A[i-1]=B[j-1]  + f[i-1][j]
               情况一，B[j-1]=A[i-1]                情况二，B[j-1] != A[i-1]
               
 初始条件：
 如果B为空串，B在A中的出现次数是1
 f[i][0] = 1 其中i取值为0,...m
 如果A是空串，而B不是，B在A中的出现次数是0
 f[0][j] = 0 其中，j取值是1,...n
 
 class Solution(object):
    def numDistinct(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: int
        """
        m,n = len(s),len(t)
        f = [[0 for j in range(n+1)] for i in range(m+1)]
        
        for i in range(m+1):
            for j in range(n+1):
                if j == 0:      # 如果B是空串    顺序不要和下面反了
                    f[i][j] = 1
                    continue
                if i==0 :        # 如果B不是空串，而A是空串
                    f[i][j] = 0
                    continue
                f[i][j] = f[i-1][j]       # B最后一个字符不等于A的最后一个字符，这就是情况二
                if s[i-1] == t[j-1]:
                    f[i][j] += f[i-1][j-1]    # B最后一个字符等于A的最后一个字符,情况一
        return f[m][n]




