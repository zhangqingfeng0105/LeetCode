338. 比特位计数

给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

示例 1:

输入: 2
输出: [0,1,1]
示例 2:

输入: 5
输出: [0,1,1,2,1,2]

★思路：--------------

假设f(n)表示数字n转换成二进制后“1”的个数，那么我们很容易知道，f(0)=0, f(1)=1. 同时，我们也知道，二进制左移一位实际上就是十进制数字乘以2，于是我们就得到如下推算公式：

当n为偶数时，f(n)=f(n//2)

当n为奇数时，f(n)=f(n//2)+1

class Solution(object):
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        dp = [0 for _ in range(num + 1)]
        for i in range(num + 1):
            if i % 2 == 0:
                dp[i] = dp[i//2]
            else:
                dp[i] = dp[i//2] + 1
        return dp

