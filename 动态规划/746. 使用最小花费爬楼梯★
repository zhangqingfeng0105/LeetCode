746. 使用最小花费爬楼梯

数组的每个索引做为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost[i](索引从0开始)。

每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。

您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。

示例 1:

输入: cost = [10, 15, 20]
输出: 15
解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。
 示例 2:

输入: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
输出: 6
解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。
注意：

cost 的长度将会在 [2, 1000]。
每一个 cost[i] 将会是一个Integer类型，范围为 [0, 999]。





思路：
假设爬到第i个楼梯花费的体力值是一个数组cost=[x0,x1,x2,x3...xn]，注意我们是从平地开始，所以第一步需要爬到索引为0的台阶，花费x0；或者爬到索引为1的台阶，花费x1，以此类推。

反过来推算，爬到顶可以由索引为xn的台阶爬一步到达，或者索引为x(n-1)的台阶爬两步到达，由此可以假设爬到索引为n的台阶一共花费体力为f(n)，那么最终答案就是min(f(n), f(n-1)).

进一步我们推算f(n)=min(f(n-1), f(n-2))+xn，同时为了节省空间可以把f(n)存储在xn处，好了，我们终于得到了普适的递推公式：cost[i] = min(cost[i-1], cost[i-2])+cost[i].

class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        cost = [0,0] + cost
        for i in range(2,len(cost)):
            cost[i] = min(cost[i-2],cost[i-1]) + cost[i]
        return min(cost[-1],cost[-2])
