★ 房子染色

这里有n个房子在一列直线上，现在我们需要给房屋染色，分别有红色蓝色和绿色。每个房屋染不同的颜色费用也不同，你需要设计一种染色方案使得
相邻的房屋颜色不同，并且费用最小，返回最小的费用。

费用通过一个nx3 的矩阵给出，比如cost[0][0]表示房屋0染红色的费用，cost[1][2]表示房屋1染绿色的费用。
样例

样例 1:

输入: [[14,2,11],[11,14,5],[14,3,10]]
输出: 10
解释: 蓝 绿 蓝, 2 + 5 + 3 = 10

样例 2:

输入: [[1,2,3],[1,4,6]]
输出: 3

思路：

把房子N-2是什么颜色，记录下来。
分别记录油漆前N-1栋房子并且N-2是红色，蓝色，绿色的最小的花费

状态： 设油漆前i栋房子并且房子i-1是红色、蓝色、绿色的最小花费分别是 f[i][0]， f[i][1] , f[i][2]

转移方程：       f[i][0]      =           min{f[i-1][1]    +   cost[i-1][0],          f[i-1][2]    +    cost[i-1][0]  }
油漆前i栋房子并且房子i-1是红色的最小花费     油漆前i-1栋房子且房子i-2是蓝色的最小花费加上油漆房子i-1的花费

初始条件：
 f[0][0] = f[0][1] = f[0][2] = 0
 
 
代码：

class Solution:
    """
    @param costs: n x 3 cost matrix
    @return: An integer, the minimum cost to paint all houses
    """
    def minCost(self, costs):
        # write your code here
        if not costs:
            return 0
        m,n = len(costs), 3
        f = [[float('inf') for j in range(n+1)] for i in range(m+1)]
        f[0][0] = f[0][1] = f[0][2] = 0
        for i in range(1,m+1):
            for j in range(n):     # 目前位置的房子的颜色
                for k in range(n):   # 前一个房子的颜色
                    if j == k:
                        continue
                    f[i][j] = min(f[i][j], f[i-1][k] + costs[i-1][j])
        return min(f[m][0],f[m][1],f[m][2])
        
 
