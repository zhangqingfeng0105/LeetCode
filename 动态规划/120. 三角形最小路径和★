120. 三角形最小路径和

给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]                                    -----------（1）
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。


思路：
    2
    | \
    3  4
    | \| \
    6  5  7
    | \| \| \
    4  1  8  3                     -----------（2）
   我们把三角形(1) 看成数组的左下部分(2)，采用自下向上的方式，比如我们先记录这个二维数组的最后一行，dp=traingle[-1]，dp共有四个元素4，1，8，3，
   此时我们再自下往上遍历，遍历倒数第二行，对于倒数第二行[6，5，7]，他与最后一行的最短路径是，6+min(4,1)，5+min(1,8),7+min(8,3)，将结果赋值到
   dp,因此dp为[7,6,10,3]，再遍历倒数第三行[3,4].....
   最后取出dp[0]，就是最后的结果
   
   class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        dp = triangle[-1]
        for i in range(len(triangle)-2,-1,-1):
            for j in range(i+1):
                dp[j]=min(dp[j],dp[j+1])+triangle[i][j]
        return dp[0]
