64. 最小路径和

给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

思路：
创建一个dp，其格式与grid一样，用0填充
dp[i][j] 表示达到grid[i][j]元素时的最小路径。它的dp[i][j]更新规则是，每次比较其左边和上边的元素大小，小者加上grid[i][j]就是dp[i][j]
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        dp = [[0 for i in range(len(grid[0]))] for j in range(len(grid))]
        dp[0][0] = grid[0][0]
        for i in range(1,len(grid[0])):
            dp[0][i] = dp[0][i-1] + grid[0][i]
        for j in range(1,len(grid)):
            dp[j][0] = dp[j-1][0]+grid[j][0]
            for m in range(1,len(grid[0])):
                dp[j][m] = min(dp[j][m-1],dp[j-1][m]) + grid[j][m]     # 比较左边和上面的元素大小
        return dp[-1][-1]
