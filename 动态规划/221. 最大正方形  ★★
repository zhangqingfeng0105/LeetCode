★★221. 最大正方形

在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。

示例:

输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4

★★ 思路： -----------------------------------------

如果以(i-1,j-1), (i-1,j), (i,j-1) 为右下角的最大全1正方形的边长分别是L1，L2,L3，而(i,j)格子里是1，那么以(i,j)为右下角的最大全1正方形的
边长应该是min（L1,L2,L3）+1

原来是求以(i,j) 为右下角的最大全1正方形的边长
现在是求以(i-1,j-1), (i-1,j), (i,j-1) 为右下角的最大全1正方形的边长

状态：   设  f[i][j]为以(i,j) 右下角的最大全1正方形的边长

                       0     如果 (i,j) 是 0
    f[i][j]     =      1     如果(i,j) 是1 并且 i=0 或者 j= 0
                       min ( f[i-1][j],  f[i-1][j-1],  f[i][j-1]  )   +  1  如果(i,j)是1
                       
  最终答案  max (f[i][j] * f[i][j])


class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0:
            return 0
        m, n = len(matrix),len(matrix[0])
        f = [[0 for j in range(n)] for i in range(m)]
        res = 0
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == '0':       # 注意输入矩阵matrix里面的0和1都是字符串，不是正整数
                    f[i][j] = 0
      
                elif i == 0 or j == 0:  # 如果(i,j)格子是1并且在矩阵的上边或左边
                    f[i][j] = 1
                    res = max(res,1)
                  
                else:
                    f[i][j] = min(f[i-1][j],f[i-1][j-1],f[i][j-1]) + 1
                    res = max(res,f[i][j] * f[i][j])
        return res
