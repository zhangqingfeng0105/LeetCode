★ 背包问题 Ⅴ

给定N个物品，物品的重量是正整数：A0,A1,...,An-1， 价值是 V0，V1，...,Vn-1，背包的总承重是M，每种物品有无穷多个，问，背包最大价值是多少？

示例1：
输入4个物品类型，重量分别是2，3，5，7，价值分别是：1，5，2，4,背包总承重是10。
输出：15（3个物品一，重量是3*3=9<10,价值是5*3 = 15）

★思路： ------------------------

 f[i][w] = 用前i种物品拼出重量w时的最大价值(-1表示不能拼出w)
    
                  f[i][w]   =  max ( f[i-1][w-kA(i-1)] + kV(i-1) )  k>=0
用前i种物品拼出重量w时的最大价值            用前i-1种物品拼出重量w-kA(i-1)时的最大价值，再加上k个第i种物品的价值 kV(i-1)

优化：

拆开上式：
            f[i][w]   =  max ( f[i-1][w], f[i-1][w-A(i-1)]+V(i-1), f[i-1][w-2A(i-1)]+2V(i-1),.... )
即：        f[i][w]   =  max ( f[i-1][w] , f[i][w-A(i-1)] + V(i-1) )


class Solution:
    '''
    num: 存放每件商品重量的列表
    v: 存放每件商品价值的列表
    m: 背包总承重，int正整数
    '''
    def backPack(self,num,v,m):
        n = len(num)
        if n == 0:
            return 0
        dp = [-1 for j in range(m+1)]
        dp[0] = 0

        for i in range(1,n+1):
            for w in range(m+1):
                '''
                dp[w] 代表着 dp[i-1][w]
                max(dp[i-1][w], dp[i-1][w-A(i-1)]+V(i-1) )
                '''
                if w >= num[i-1] and (dp[w-num[i-1]] != -1):
                    dp[w] = max(dp[w],dp[w-num[i-1]]+v[i-1])
        return max(dp)     # 并不是重量越大，价值越大，因此找出价值最大的
