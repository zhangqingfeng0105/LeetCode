★★ 403. 青蛙过河

一只青蛙想要过河。 假定河流被等分为 x 个单元格，并且在每一个单元格内都有可能放有一石子（也有可能没有）。 青蛙可以跳上石头，但是不可以跳入水中。

给定石子的位置列表（用单元格序号升序表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一个石子上）。 开始时， 青蛙默认已站在第一个石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格1跳至单元格2）。

如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。

请注意：

石子的数量 ≥ 2 且 < 1100；
每一个石子的位置序号都是一个非负整数，且其 < 231；
第一个石子的位置永远是0。
示例 1:

[0,1,3,5,6,8,12,17]

总共有8个石子。
第一个石子处于序号为0的单元格的位置, 第二个石子处于序号为1的单元格的位置,
第三个石子在序号为3的单元格的位置， 以此定义整个数组...
最后一个石子处于序号为17的单元格的位置。

返回 true。即青蛙可以成功过河，按照如下方案跳跃： 
跳1个单位到第2块石子, 然后跳2个单位到第3块石子, 接着 
跳2个单位到第4块石子, 然后跳3个单位到第6块石子, 
跳4个单位到第7块石子, 最后，跳5个单位到第8个石子（即最后一块石子）。
示例 2:

[0,1,2,3,4,8,9,11]

返回 false。青蛙没有办法过河。 
这是因为第5和第6个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。


★★ 思路： ----------------------------------------------

最后一步：如果最后可以调到最后一个石头a[n-1],考虑最后跳的一步L
青蛙一定是从某块石头a[i]=a[n-1]-L跳过来的
所以考虑是否能调到a[i]
但是倒数第二跳只能是L-1，L或者L+1

转移方程：
设      f[i][j] 表示是否能最后一跳j跳刀石头a[i]

设上一块石头是a[k] = a[i]-j,可通过一个哈希表a[k] -> k 快速找到k

         f[i][j] =      f[k][j-1]   or   f[k][j]     or   f[k][j+1]  | a[k]=a[i]-j
                   能最后一跳j-1跳到石头a[k]   能最后一跳j跳到石头a[k]    能最后一跳j+1 跳到石头a[k]

因为第一步跳的距离是1，一直向右跳，最多跳N-1步，所以一步最大跳跃距离是N-1

简单情况：
   如果只有一块石头，输出True
   如果石头1和石头0的距离不是1，直接输出False
   
第一不跳跃距离必须是1， f[1][1]= True  , f[1][2] = f[1][3]=..f[1][N] = False

如果fN-1][1]，f[N-1][2],...f[N-1][N-1] 有一个是true，那么最终答案是True

枚举在一个集合S[i]中的L，从石头i尝试往后跳L-1，L和L+1
如果跳了M距离后有一个石头J，则把M加到S[j]中，表示可以最后一步跳M到达石头j
    也即是   f[j][M]=True
    
'''
我们把每块石头存入一个字典的键，每个石头对应的值是一个set集合(防重复)，记录的是前某块石头以步长k跳过来的，也就是记录着能到达此石头的可能的步长。
对每块石头可能的步长进行遍历，因为根据题意步长可以-1，+1。最后查看最后一块石头对于的可能步长是否为空集合，空集合说明没有石头具备跳过来的步长，非空
则说明有石头可以跳过来，即为True
'''

from copy import deepcopy
class Solution(object):
    def canCross(self, stones):
        """
        :type stones: List[int]
        :rtype: bool
        """
        n = len(stones)        
        f = {}
        for i in range(n):
            f[stones[i]] = set()   # 每块石头建立一个set集合
        
        f[stones[0]].add(0)
        for i in range(n-1):
            # tmp: f[stones[i]]
            tmp = f.get(stones[i])
            tmp1 = deepcopy(tmp)  #  不用深拷贝的话会报错，说遍历的时候改变了集合
            for k in tmp1:
                for delta in [-1,0,1]:
                    t = stones[i] + (k+delta)
                    if t in f:
                        f.get(t).add(k + delta)
                        
        return not len(f.get(stones[n-1]))==0
        
