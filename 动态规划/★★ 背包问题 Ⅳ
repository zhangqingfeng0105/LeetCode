背包问题 Ⅳ

给定N个物品，重量分别是正整数：A0,A1，A2，....,An-1  ，价值分别是正整数 V0，V1，....Vn-1，一个背包最大承重是正整数M,问，最对能带走多大价值的商品？

示例1:

有三个物品，重量分别是2，3，5，价值分别是20，30，60，背包承重为5
输出 60（2+3=5，价值20+30=50 < 60）

★ 思路：------------------------------------------

重量放在状态里，价值放在数组里，参考背包Ⅰ

            f[i][w]   =   max( f[i-1][w],  f[i-1][w-A(i-1)] + V(i-1) | w >= A(i-1) 且f[i-1][w-A(i-1)] != -1
用前i个物品拼出总量w时的最大价值   用前i-1个物品拼出总量w时的最大价值            用前i个物品拼出总量w-A(i-1)时的最大价值，加上最后一个物品的价值V(i-1)


class Solution:
    '''
    num: 存放每件商品重量的列表
    v: 存放每件商品价值的列表
    m: 背包总承重，int正整数
    '''
    def backPack(self,num,v,m):
        n = len(num)
        if n == 0:
            return 0
        dp = [-1 for j in range(m+1)]
        dp[0] = 0

        for i in range(1,n+1):
            for w in range(m,-1,-1):
                '''
                dp[w] 代表着 dp[i-1][w]
                max(dp[i-1][w], dp[i-1][w-A(i-1)]+V(i-1) )
                '''
                if w >= num[i-1] and (dp[w-num[i-1]] != -1):
                    dp[w] = max(dp[w],dp[w-num[i-1]]+v[i-1])
        return max(dp)     # 并不是重量越大，价值越大，因此找出价值最大的



