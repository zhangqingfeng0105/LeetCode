按权重随机选择

给定一个正整数数组 w ，其中 w[i] 代表位置 i 的权重，请写一个函数 pickIndex ，它可以随机地获取位置 i，选取位置 i 的概率与 w[i] 成正比。

说明:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex 将被调用不超过 10000 次
示例1:

输入: 
["Solution","pickIndex"]
[[[1]],[]]
输出: [null,0]
示例2:

输入: 
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
输出: [null,0,1,1,1,0]

# 题目解释：
  输入是一个列表，列表第一个元素是权重组成的列表，比如示例2: [1,3]就是给出的权重，它表示下标0出现的权重是1(也就是概率为1/4)，下标1出现的权重是3
  (也就是概率为3/4)，我们可以用线段来表示权重，比如[0,1)表示下标0出现的区间，[1,4)表示下标1出现的区间，因此我们在区间[0,3]随便取一个数rand，当然
  rand可以是0，1，2，3，比如rand取了3，因为3是[1,4)区间，所以返回下标1

import numpy as np
class Solution(object):

    def __init__(self, w):
        """
        :type w: List[int]
        """
        self.l = []           # 保存上面说的线段的列表
        self.size = 0         # 记录有多少个权重，也就是有多少个下班
        sum = 0
        for i in w:
            self.size += 1
            sum += i
            self.l.append(sum)

    def pickIndex(self):
        """
        :rtype: int
        """
        rand = np.random.randint(0,self.l[-1])         # numpy的randint才是左闭右开
        return self.binaryFind(rand)
                
    def binaryFind(self,rand):               # 使用非递归形式的二分查找
        first,end = 0,self.size-1
        while first <= end:
            mid = (first+end)//2
            if self.l[mid] == rand:
                return mid+1
            elif rand < self.l[mid]:
                end = mid - 1
            else:
                first = mid + 1
        return first
