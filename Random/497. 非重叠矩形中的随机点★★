497. 非重叠矩形中的随机点

给定一个非重叠轴对齐矩形的列表 rects，写一个函数 pick 随机均匀地选取矩形覆盖的空间中的整数点。

提示：

整数点是具有整数坐标的点。
矩形周边上的点包含在矩形覆盖的空间中。
第 i 个矩形 rects [i] = [x1，y1，x2，y2]，其中 [x1，y1] 是左下角的整数坐标，[x2，y2] 是右上角的整数坐标。
每个矩形的长度和宽度不超过 2000。
1 <= rects.length <= 100
pick 以整数坐标数组 [p_x, p_y] 的形式返回一个点。
pick 最多被调用10000次。
 

示例 1：

输入: 
["Solution","pick","pick","pick"]
[[[[1,1,5,5]]],[],[],[]]
输出: 
[null,[4,1],[4,1],[3,3]]
示例 2：

输入: 
["Solution","pick","pick","pick","pick","pick"]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
输出: 
[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]

from bisect import bisect_left
from random import randint
class Solution(object):

    def __init__(self, rects):       # 根据矩形的面积来选择点落在哪个矩形上
        """
        :type rects: List[List[int]]
        """
        self.rects = rects
        self.weight = []
        sum_area = 0
        for i in rects:
            area = (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1) #注意加1
            sum_area += area
            self.weight.append(sum_area)

    def pick(self):
        """
        :rtype: List[int]
        """
        index = bisect_left(self.weight,randint(1,self.weight[-1])) # 选择矩形
        rect = self.rects[index]
        return [randint(rect[0], rect[2]), randint(rect[1], rect[3])]
