在LR字符串中交换相邻字符

在一个由 'L' , 'R' 和 'X' 三个字符组成的字符串（例如"RXXLRXRXL"）中进行移动操作。一次移动操作指用一个"LX"替换一个"XL"，或者用一个"XR"替换一个"RX"。现给定起始字符串start和结束字符串end，请编写代码，当且仅当存在一系列移动操作使得start可以转换成end时， 返回True。

示例 :

输入: start = "RXXLRXRXL", end = "XRLXXRRLX"
输出: True
解释:
我们可以通过以下几步将start转换成end:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX

class Solution(object):
    def canTransform(self, start, end):
        """
        :type start: str
        :type end: str
        :rtype: bool
        """
        '''
        思路：题目说了可以把初始字符串中的XL换成LX，可以把初始字符串中的RX换成XR，那么也就是说初始字符串中的L只能向左移动，初始字符串中R只能向右移动。并且L和R是不可能交换顺序的，两个字符串的L和R对应次数应该相等。
        '''
        i, j = 0, 0
        N = len(start)
        while i < N and j < N:
            while i < N - 1 and start[i] == 'X':
                i += 1
            while j < N - 1 and end[j] == 'X':
                j += 1
            if start[i] != end[j]:
                return False
            if start[i] == 'L' and i < j:
                return False
            if start[i] == 'R' and i > j:
                return False
            i += 1
            j += 1
        return True
