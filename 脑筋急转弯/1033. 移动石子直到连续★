移动石子直到连续

三枚石子放置在数轴上，位置分别为 a，b，c。

每一回合，我们假设这三枚石子当前分别位于位置 x, y, z 且 x < y < z。从位置 x 或者是位置 z 拿起一枚石子，并将该石子移动到某一整数位置 k 处，其中 x < k < z 且 k != y。

当你无法进行任何移动时，即，这些石子的位置连续时，游戏结束。

要使游戏结束，你可以执行的最小和最大移动次数分别是多少？ 以长度为 2 的数组形式返回答案：answer = [minimum_moves, maximum_moves]

 

示例 1：

输入：a = 1, b = 2, c = 5
输出：[1, 2]
解释：将石子从 5 移动到 4 再移动到 3，或者我们可以直接将石子移动到 3。
示例 2：

输入：a = 4, b = 3, c = 2
输出：[0, 0]
解释：我们无法进行任何移动。

class Solution(object):
    def numMovesStones(self, a, b, c):
        """
        :type a: int
        :type b: int
        :type c: int
        :rtype: List[int]
        """
        '''
        思路：这个题目解释的不清楚，首先输入的abc并不对应xyz，首先需要将输入的abc从小到大排序，排序后的才是xyz
        每次移动之后，最小的那个又命名为x，最大的又命名为z,中间的那个命名为y。比如：起初输入a=5,b=8,c=1,我们将其排序然后依次命名：x=1,y=5,z=8,
        我们现在移动x=1上的石头，将其放到6上，这是坐标轴有三个位置分别为：5，6，8,那么最小的那个值5就命名为x，最大的值8命名为z,中间的值6命名为y.
        下一移动我们可以移动x=5的石头或者z=8的石头，比如把z=8的石头放到7上，此时x=5,y=6,z=7，满足要求无法再移动了。
        对于排序后(a<b<c)的结果，目标是使  abc  连续。那么最小移动次数和最大移动次数可分为6种情况：
        <1>. abc连续：此时无法移动了，最小移动次数 = 最大移动次数 = 0 
        <2>. bc连续，ab不连续(ab要是连续就成了第一种情况了): a  bc, 最小移动次数就是把a移动到b-1位置，这样abc连续，移动次数为1；最大移动次数就是
             a慢慢的成为b-1，最大移动次数为b-1-a,故最小次数为1，最大次数为b-1-a
        <3>. ab连续，bc不连续。即: ab   c 类似于<2>，最小移动次数为1，最大移动次数为c-1-b 
        <4>. c和b隔一个空位，ab不连续(连续的话就成了情况<3>的特例),即 a    b c，此时最小移动次数的做法是把a移动到b与c的空位上，这样bac连续了，
             因此最小移动次数为1，最大移动次数是，a慢慢成为b-1，c慢慢成为b+1(即c往左移动一个),因此最大次数是：b-1-a + 1 = b-a
        <5>. a与b之间隔一个空位，bc不连续。即： a b    c ，类似于<4>，最小次数为1，最大次数为c-b
        <6>. 除上述五个情况外的剩下的情况，即 a      b       c，最小次数是，把a移动到b+1,这时成为b,b+1   c，把c移动到b+2,此时 b,b+1,b+2连续，
             即最小次数为2，最大次数的做法是，a慢慢成为b-1,c慢慢成为b+1，最大次数是：c-1-b + b - 1 -a = c-2-a
        a,b,c = sorted([a,b,c])
        if c-2==b-1==a:            # 第一种情况
            return [0,0]
        elif c -1 == b:            # 第二种情况
            return [1,b-1-a]
        elif b-1 == a:             # 第三种情况
            return [1,c-1-b]
        elif c-2==b:               # 第四种情况
            return [1,b-a]
        elif b-2==a:               # 第五种情况
            return [1,c-b]
        else:                      # 第六种情况
            return [2,c-a-2]
