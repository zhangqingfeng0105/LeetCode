逆波兰表达式求值

根据逆波兰表示法，求表达式的值。

有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

说明：

整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
示例 1：

输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: ((2 + 1) * 3) = 9
示例 2：

输入: ["4", "13", "5", "/", "+"]
输出: 6
解释: (4 + (13 / 5)) = 6
示例 3：

输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
输出: 22
解释: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22


class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        symbol_dict = {'+':self.add,'-':self.sub,'*':self.mul,'/':self.div}
        for i in tokens:
            if i not in symbol_dict:
                stack.append(int(i))
            else:
                stack.append(symbol_dict[i](stack.pop(),stack.pop()))
        return stack.pop()

    def add(self,x,y):
        return y.__add__(x)
    def sub(self,x,y):
        return y.__sub__(x)
    def mul(self,x,y):
        return y.__mul__(x)
    def div(self,x,y):
        return int(float(y)/x)         # python2 的除法和python3不一样，可以让被除数变成float
