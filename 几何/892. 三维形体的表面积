三维形体的表面积

在 N * N 的网格上，我们放置一些 1 * 1 * 1  的立方体。

每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。

请你返回最终形体的表面积。

 

示例 1：

输入：[[2]]
输出：10
示例 2：

输入：[[1,2],[3,4]]
输出：34
示例 3：

输入：[[1,0],[0,2]]
输出：16
示例 4：

输入：[[1,1,1],[1,0,1],[1,1,1]]
输出：32
示例 5：

输入：[[2,2,2],[2,1,2],[2,2,2]]
输出：46
 

提示：

1 <= N <= 50
0 <= grid[i][j] <= 50


class Solution(object):
    def surfaceArea(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        '''
        思路：输入的是二维列表，行代表方块放的行数，列代表方块放的列数，比如示例1，二维列表是1*1的，那么
        它就表示在网格第0行第0列放了2个摞起来的立方体，假如用投影法，中间的空心无法处理，所以应该算出每个格的表面积
        然后再减去重叠的面积，每个格的表面积是 height*4+2
        '''
        sum_area = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:         # 如果格子没放立方体，也即是grid[i][j]==0，那么其表面积就是0
                    self_area = 0         
                else:
                    self_area = grid[i][j] * 4 +2    # self_area表示这个格子的表面积，这个表面积需要减去与其他格子重叠的部分
                if i-1>=0:
                    min_front = min(grid[i-1][j],grid[i][j])      # 格子前面重叠的表面积
                else:
                    min_front = 0
                if j- 1>=0:
                    min_left = min(grid[i][j-1],grid[i][j])       # 格子左边被重叠的表面积
                else:
                    min_left = 0
                if i+1 < len(grid):
                    min_back = min(grid[i+1][j],grid[i][j])       # 格子后面被重叠的表面积
                else:
                    min_back = 0
                if j+1 < len(grid[0]):
                    min_right = min(grid[i][j+1],grid[i][j])      # 格子右边被重叠的表面积
                else:
                    min_right = 0
                sum_area  = sum_area + self_area-min_front - min_left - min_back - min_right  # 表面积减重叠的部分就是结果
        return sum_area
